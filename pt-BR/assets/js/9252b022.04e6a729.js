"use strict";(self.webpackChunksymbiosis_techmmunity_com=self.webpackChunksymbiosis_techmmunity_com||[]).push([[351],{3905:function(e,o,n){n.d(o,{Zo:function(){return p},kt:function(){return d}});var t=n(7294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function s(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?s(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function a(e,o){if(null==e)return{};var n,t,r=function(e,o){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=t.createContext({}),c=function(e){var o=t.useContext(m),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},p=function(e){var o=c(e.components);return t.createElement(m.Provider,{value:o},e.children)},l={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},u=t.forwardRef((function(e,o){var n=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,y=u["".concat(m,".").concat(d)]||u[d]||l[d]||s;return n?t.createElement(y,i(i({ref:o},p),{},{components:n})):t.createElement(y,i({ref:o},p))}));function d(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var a={};for(var m in o)hasOwnProperty.call(o,m)&&(a[m]=o[m]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7779:function(e,o,n){n.r(o),n.d(o,{frontMatter:function(){return a},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var t=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],a={sidebar_position:1},m="NestJs",c={unversionedId:"integrations/nestjs",id:"integrations/nestjs",isDocsHomePage:!1,title:"NestJs",description:"O Symb faz integra\xe7\xe3o com NestJS, ent\xe3o voc\xea pode trabalhar com o framework sem se preocupar com a liga\xe7\xe3o com o banco de dados.",source:"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/integrations/nestjs.md",sourceDirName:"integrations",slug:"/integrations/nestjs",permalink:"/pt-BR/docs/integrations/nestjs",editUrl:"https://github.com/techmmunity/symbiosis.techmmunity.com/edit/master/docs/integrations/nestjs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"MongoDB",permalink:"/pt-BR/docs/plugins/mongodb"},next:{title:"Utilizando arrays de enums",permalink:"/pt-BR/docs/how-to/arrays-of-enums"}},p=[{value:"Instala\xe7\xe3o",id:"instala\xe7\xe3o",children:[],level:2},{value:"Como usar (exemplo com DynamoDB)",id:"como-usar-exemplo-com-dynamodb",children:[],level:2},{value:"<code>SymbiosisModule</code>",id:"symbiosismodule",children:[{value:"<code>.forRoot()</code>",id:"forroot",children:[],level:3},{value:"<code>.forFeature()</code>",id:"forfeature",children:[],level:3}],level:2},{value:"Decorators",id:"decorators",children:[{value:"<code>@InjectRepository()</code>",id:"injectrepository",children:[],level:3},{value:"<code>@InjectConnection()</code>",id:"injectconnection",children:[],level:3}],level:2}],l={toc:p};function u(e){var o=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,t.Z)({},l,n,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"nestjs"},"NestJs"),(0,s.kt)("p",null,"O ",(0,s.kt)("em",{parentName:"p"},"Symb")," faz integra\xe7\xe3o com NestJS, ent\xe3o voc\xea pode trabalhar com o framework sem se preocupar com a liga\xe7\xe3o com o banco de dados."),(0,s.kt)("h2",{id:"instala\xe7\xe3o"},"Instala\xe7\xe3o"),(0,s.kt)("p",null,"Com Yarn:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add @techmmunity/symbiosis-nestjs\n")),(0,s.kt)("p",null,"Com NPM:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"npm i @techmmunity/symbiosis-nestjs\n")),(0,s.kt)("h2",{id:"como-usar-exemplo-com-dynamodb"},"Como usar (exemplo com DynamoDB)"),(0,s.kt)("p",null,"O ",(0,s.kt)("em",{parentName:"p"},"Symb")," vai funcionar normalmente, com a unica exce\xe7\xe3o sendo a integra\xe7\xe3o com o Nest, ent\xe3o voc\xea vai poder usar os reposit\xf3rios como sempre, e os par\xe2metros recebidos ser\xe3o os mesmos valores de sempre."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// app.module.ts\n\nimport { Module } from "@nestjs/common";\nimport { SymbiosisModule } from "@techmmunity/symbiosis-nestjs";\nimport {\n  Connection,\n  DynamoDbConnectionOptions,\n} from "@techmmunity/symbiosis-dynamodb";\n\nimport { UserEntity } from "./user.entity";\n\n@Module({\n  imports: [\n    SymbiosisModule.forRoot<DynamoDbConnectionOptions>(Connection, {\n      // ...\n      entities: [UserEntity],\n      databaseConfig: {\n        // ...\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// user.module.ts\n\nimport { Module } from "@nestjs/common";\nimport { SymbiosisModule } from "@techmmunity/symbiosis-nestjs";\n\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\nimport { UserEntity } from "./user.entity";\n\n@Module({\n  imports: [SymbiosisModule.forFeature([UserEntity])],\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// user.service.ts\n\nimport { Injectable } from "@nestjs/common";\nimport { InjectRepository } from "@techmmunity/symbiosis-nestjs";\nimport { Repository, Connection } from "@techmmunity/symbiosis-dynamodb";\n\nimport { UserEntity } from "./user.entity";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepository: Repository<UserEntity>,\n    @InjectConnection()\n    private connection: Connection\n  ) {}\n\n  findOne(id: string): Promise<User> {\n    return this.userRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async remove(id: string): Promise<void> {\n    await this.userRepository.delete({\n      id,\n    });\n  }\n}\n')),(0,s.kt)("h2",{id:"symbiosismodule"},(0,s.kt)("inlineCode",{parentName:"h2"},"SymbiosisModule")),(0,s.kt)("p",null,"O ",(0,s.kt)("inlineCode",{parentName:"p"},"SymbiosisModule")," \xe9 a conex\xe3o principal entre NestJs e o ",(0,s.kt)("em",{parentName:"p"},"Symb"),". Ele possui dois m\xe9todos que te permitem fazer a integra\xe7\xe3o com o Symbiosis da maneira mais perform\xe1tica poss\xedvel."),(0,s.kt)("h3",{id:"forroot"},(0,s.kt)("inlineCode",{parentName:"h3"},".forRoot()")),(0,s.kt)("p",null,"O m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},".forRoot()")," deve ser usado no seu Module principal (como ",(0,s.kt)("inlineCode",{parentName:"p"},"AppModule"),"). Isso permite voc\xea linkar o seu c\xf3digo com o banco de dados."),(0,s.kt)("p",null,"O m\xe9todo recebe dois par\xe2metros, o primeiro \xe9 a classe que voc\xea quer usar para conectar ao banco de dados (aquela que voc\xea importa do plugin), e o segundo \xe9 a configura\xe7\xe3o da conex\xe3o."),(0,s.kt)("p",null,"Nessa configura\xe7\xe3o, voc\xea deve especificar ",(0,s.kt)("strong",{parentName:"p"},"todas")," as suas entidades."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// app.module.ts\n\nimport { Module } from "@nestjs/common";\nimport { SymbiosisModule } from "@techmmunity/symbiosis-nestjs";\nimport {\n  Connection,\n  DynamoDbConnectionOptions,\n} from "@techmmunity/symbiosis-dynamodb";\n\nimport { UserEntity } from "./user.entity";\n\n@Module({\n  imports: [\n    SymbiosisModule.forRoot<DynamoDbConnectionOptions>(Connection, {\n      // ...\n      entities: [UserEntity],\n      databaseConfig: {\n        // ...\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n')),(0,s.kt)("h3",{id:"forfeature"},(0,s.kt)("inlineCode",{parentName:"h3"},".forFeature()")),(0,s.kt)("p",null,"O m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},".forFeature()")," deve ser usado no seu Modulo de dom\xednio (como ",(0,s.kt)("inlineCode",{parentName:"p"},"UserModule"),"). Isso vai carregar e injetar todos os reposit\xf3rios que voc\xea ir\xe1 usar nesse dominio."),(0,s.kt)("p",null,"O m\xe9todo recebe dois par\xe2metros, o primeiro \xe9 um array de entidades (apenas aquelas que voc\xea vai precisa nesse Modulo), e a segunda (opcional) \xe9 o nome da conex\xe3o."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// user.module.ts\n\nimport { Module } from "@nestjs/common";\nimport { SymbiosisModule } from "@techmmunity/symbiosis-nestjs";\n\nimport { UserService } from "./user.service";\nimport { UserController } from "./user.controller";\nimport { UserEntity } from "./user.entity";\n\n@Module({\n  imports: [SymbiosisModule.forFeature([UserEntity])],\n  providers: [UserService],\n  controllers: [UserController],\n})\nexport class UserModule {}\n')),(0,s.kt)("h2",{id:"decorators"},"Decorators"),(0,s.kt)("h3",{id:"injectrepository"},(0,s.kt)("inlineCode",{parentName:"h3"},"@InjectRepository()")),(0,s.kt)("p",null,"Injeta um reposit\xf3rio."),(0,s.kt)("p",null,"Recebe a entidade como primeiro par\xe2metro e opcionalmente o nome da conex\xe3o como segundo par\xe2metro. Se nenhum nome de conex\xe3o for passado, usar\xe1 a conex\xe3o padr\xe3o."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// user.service.ts\n\nimport { Injectable } from "@nestjs/common";\nimport { InjectRepository } from "@techmmunity/symbiosis-nestjs";\nimport { Repository } from "@techmmunity/symbiosis-dynamodb";\n\nimport { UserEntity } from "./user.entity";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity, "connection_x")\n    private userRepository: Repository<UserEntity>\n  ) {}\n}\n')),(0,s.kt)("h3",{id:"injectconnection"},(0,s.kt)("inlineCode",{parentName:"h3"},"@InjectConnection()")),(0,s.kt)("p",null,"Injeta uma conex\xe3o."),(0,s.kt)("p",null,"Recebe o nome da conex\xe3o como par\xe2metro opcional. Se nenhum nome de conex\xe3o for passado, usar\xe1 a conex\xe3o padr\xe3o."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// user.service.ts\n\nimport { Injectable } from "@nestjs/common";\nimport { InjectRepository } from "@techmmunity/symbiosis-nestjs";\nimport { Repository } from "@techmmunity/symbiosis-dynamodb";\n\nimport { UserEntity } from "./user.entity";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity, "connection_x")\n    private userRepository: Repository<UserEntity>\n  ) {}\n}\n')))}u.isMDXComponent=!0}}]);